<launch>
    
    <!-- Gazebo args -->
    <arg name="debug" default="false"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="world_name" default=""/>

    <!-- URDF -->
    <arg name="camera_calibration_path" default="$(find firo_calibration)/kalibr/camimu/inflated/camimu-camchain-imucam.yaml"/>
    <arg name="imu_frequency"         default="200.0" />
    <arg name="model" default="$(find firo_description)/robots/firo.urdf.xacro"/>
    <arg name="publish_frequency" default="100"  />
    <arg name="stereo_fps"            default="30"  />

    
    <param name="use_sim_time" command="$(arg use_sim_time)" />
    
    <include file="$(find firo_description)/launch/firo_description.launch" pass_all_args="true"/>
    
    <remap from="/firo/controller/wheels/cmd_vel" to="/cmd_vel" />
    <remap from="/firo/controller/wheels/odom" to="/wheels/odom" />

    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="headless" value="$(arg headless)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="world_name" value="$(arg world_name)"/>
    </include>

    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
        args="-z 0 -unpause -urdf -model robot -param robot_description" respawn="false" output="screen" />

    <include file="$(find firo_control)/launch/controllers.launch"/>

    <!-- Using IMU filter better mimics the physical device, -->
    <!-- then using absolute IMU orientation with noise from gazebo -->
    <node name="imu_fusion" pkg="imu_filter_madgwick" type="imu_filter_node" output="screen">
        <param name="use_mag" value="false"/>
        <!-- Unfortunatelly, we can set covariance only to all axes at once -->
        <!-- However, roll and pitch are not as important as yaw, so we focus on the latter -->
        <!-- In EKF node we fuse yaw data in differentiall mode, which heuristically calculates -->
        <!-- the resulting twist covariance from position covariance -->
        <!-- Assuming we know the desired twist covariance, we can set the orientation_stddev -->
        <!-- parameter according to the following formula: -->
        <!-- orientation_stddev = sqrt(twist_covariance * imu_frequency / 2) -->
        <param name="orientation_stddev" value="0.01"/>
        <param name="world_frame" value="enu"/>
        <param name="publish_tf" value="false"/>
        <param name="remove_gravity_vector" value="true"/>
        <remap from="imu/data_raw" to="/front_camera/imu/data"/>
        <remap from="imu/mag" to="/front_camera/imu/mag"/>
        <remap from="imu/data" to="/front_camera/imu_compensated/data"/>
    </node>

    <!-- We transform the imu data to the base_link frame, so it can be properly used by the EKF node -->
    <!-- It is required, because the EKF node assumes that the imu is planar to the robot base -->
    <node name="imu_data_transformer" pkg="imu_transformer" type="imu_transformer_node" output="screen">
        <remap from="imu_in/data" to="/front_camera/imu_compensated/data"/>
        <remap from="imu_out/data" to="/imu_compensated/data"/>
        <param name="target_frame" value="base_link"/>
    </node>
</launch>